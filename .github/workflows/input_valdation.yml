# .github/workflows/terraform-vars-validate.yml
name: Terraform Vars Validation

on:
  push:
    paths:
      - '**/*.tfvars'

jobs:
  validate-tfvars:
    runs-on: ubuntu-latest
    env:
      SNOW_INSTANCE: ${{ secrets.SNOW_INSTANCE }} # ServiceNow instance URL 
      SNOW_USERNAME: ${{ secrets.SNOW_USERNAME }} # ServiceNow API username
      SNOW_PASSWORD: ${{ secrets.SNOW_PASSWORD }} # ServiceNow API password
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Install curl and jq for API calls
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      # Fetch ServiceNow assignment groups
      - name: Fetch ServiceNow Assignment Groups
        id: fetch_groups
        run: |
          # Make API call to ServiceNow to get assignment groups
          RESPONSE=$(curl -s -u "${SNOW_USERNAME}:${SNOW_PASSWORD}" \
            "${SNOW_INSTANCE}/api/now/table/sys_user_group?sysparm_fields=name" \
            -H "Accept: application/json")
          
          # Check if API call was successful
          if [[ $(echo "$RESPONSE" | jq -r '.error // empty') ]]; then
            echo "Error: Failed to fetch assignment groups from ServiceNow"
            echo "$RESPONSE" | jq -r '.error.message'
            exit 1
          fi
          
          # Extract group names into a JSON array
          GROUPS=$(echo "$RESPONSE" | jq -r '.result[].name' | jq -R . | jq -s .)
          echo "assignment_groups=$GROUPS" >> $GITHUB_OUTPUT

      # Validate .tfvars file
      - name: Validate Terraform Vars
        run: |
          # Get assignment groups from previous step
          ASSIGNMENT_GROUPS=$(echo "${{ steps.fetch_groups.outputs.assignment_groups }}")
          
          # Find all .tfvars files
          TFVARS_FILES=$(find . -type f -name "*.tfvars")
          
          if [ -z "$TFVARS_FILES" ]; then
            echo "No .tfvars files found"
            exit 0
          fi

          # Validate each .tfvars file
          for file in $TFVARS_FILES; do
            echo "Validating $file..."
            
            # Check if file is empty
            if [ ! -s "$file" ]; then
              echo "Error: $file is empty"
              exit 1
            fi

            # Check for required variables and format
            while IFS= read -r line; do
              # Skip empty lines and comments
              if [[ -z "$line" || "$line" =~ ^\s*# ]]; then
                continue
              fi

              # Check for valid key-value format
              if ! [[ "$line" =~ ^[[:space:]][a-zA-Z_][a-zA-Z0-9_][[:space:]]=[[:space:]].*$ ]]; then
                echo "Error: Invalid format in $file at line: $line"
                exit 1
              fi

              # Tag Name validations
              if [[ "$file" == *"terraform.tfvars" ]]; then
                # Required variables
                REQUIRED_VARS=("T2_ValueStream" "Application" "ServiceOwner""ProjectCode" "CostCode" "DR_Enabled" "L2Support")
                for var in "${REQUIRED_VARS[@]}"; do
                  if ! grep -q "^[[:space:]]$var[[:space:]]=" "$file"; then
                    echo "Error: Required variable '$var' not found in $file"
                    exit 1
                  fi
                done

                # Validate Tag values
                while IFS='=' read -r key value; do
                  # Remove whitespace
                  key=$(echo "$key" | tr -d '[:space:]')
                  value=$(echo "$value" | tr -d '[:space:]')

                  # Skip empty or comment lines
                  if [[ -z "$key" || "$key" =~ ^# ]]; then
                    continue
                  fi

                  case $key in
                    "T2_ValueStream")
                      if ! [[ "$value" =~ ^[a-z0-9-]{3,50}$ ]]; then
                        echo "Error: Invalid T2_ValueStream in $file. Must be 3-50 characters, lowercase letters, numbers, or hyphens"
                        exit 1
                      fi
                      ;;
                    "Application")
                      if ! [[ "$value" =~ ^[a-z0-9-]{3,50}$ ]]; then
                        echo "Error: Invalid Application in $file. Must be 3-50 characters, lowercase letters, numbers, or hyphens"
                        exit 1
                      fi
                      ;;
                    "environment")
                      if ! [[ "$value" =~ ^(dev|staging|production)$ ]]; then
                        echo "Error: Invalid environment in $file. Must be dev, staging, or production"
                        exit 1
                      fi
                      ;;
                    "L2Support")
                      # Remove quotes if present
                      value=$(echo "$value" | sed 's/"//g')
                      # Check if value exists in ServiceNow assignment groups
                      if ! echo "$ASSIGNMENT_GROUPS" | jq -e --arg val "$value" 'index($val)'; then
                        echo "Error: Invalid L2Support value '$value' in $file. Must be a valid ServiceNow assignment group"
                        exit 1
                      fi
                      ;;
                  esac
                done < <(grep -v '^#' "$file" | grep '=')
              fi
            done < "$file"
          done

      # Post comment to PR if validation fails
      - name: Post PR Comment on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const errorMessage = `
            Terraform .tfvars validation failed! Please check the following:
            - File has valid syntax (key = value)
            - Required variables are present (T2_ValueStream, Application, ServiceOwner, ProjectCode, CostCode, DR_Enabled, L2Support)
            - Application must be 3-50 characters (lowercase, numbers, hyphens)
            - environment must be one of: dev, staging, production
            - L2Support must be a valid ServiceNow assignment group
            Check the workflow logs for detailed error messages.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: errorMessage
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
